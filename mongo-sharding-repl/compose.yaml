name: mongo-sharding-repl

services:

  # сервер конфигурации
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27030:27030"
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27030"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #############
  # 1-й шард 
  shard11:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard11
    restart: always
    ports:
      - "27011:27011"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard11-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27011"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard12:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard12
    restart: always
    ports:
      - "27012:27012"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard12-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27012"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard13:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard13
    restart: always
    ports:
      - "27013:27013"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard13-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27013"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #############
  # 2-й шард 
  shard21:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard21
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    volumes:
      - shard21-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  shard22:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard22
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    volumes:
      - shard22-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard23:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard23
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.23
    volumes:
      - shard23-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27040:27040"
    networks:
      app-network:
        ipv4_address: 173.17.0.40
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27030", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27040"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # приложение
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - "8080:8080"
    networks:
      app-network:
        ipv4_address: 173.17.0.50
    environment:
      MONGODB_URL: "mongodb://mongos_router:27040"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard11-data:
  shard12-data:
  shard13-data:
  shard21-data:
  shard22-data:
  shard23-data: